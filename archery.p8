pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- endless archery
-- by epbarger

gm = 2 -- global multiplier, because i shifted from 60fps to 30
terrain = nil
bg_terrain = nil
arrow = nil
grounded_arrows = {}
game_state = 'title'
level = 1
total_shots = 0
level_shots = 0
cloud_sprites = {
 { sprite = 8, width = 4, height = 2 },
 { sprite = 40, width = 4, height = 1 },
 { sprite = 56, width = 2, height = 1},
 { sprite = 58, width = 2, height = 1 },
 { sprite = 12, width = 2, height = 1 },
 { sprite = 28, width = 2, height = 1 },
 { sprite = 44, width = 4, height = 1 },
 { sprite = 60, width = 4, height = 1 }
}
clouds ={}
tree_sprites = {
 { sprite = 19 },
 { sprite = 20 }
}
wind = 0
windmill_counter = 0
debug = false

function _init()
 cartdata("epbarger_endlessarchery_v1")
 -- srand(1)

 shift_y = 5
 a_end = random_endpoint(shift_y)
 b_start = {x=0, y=a_end.y}
 b_end = random_endpoint(shift_y)
 terrain = {
  points_a = generate_points({x=0,y=random_endpoint(shift_y-5).y}, a_end, 1.3, 30),
  points_b = generate_points(b_start, b_end, 1.3, 30),
  offset = 0,
  speed = 0.75,
  pallete = 3,
  generate = function (s,e)
   e.y += 5
   return generate_points(s,e,1.3,30)
  end
 }
 terrain.trees_a = grow_trees(terrain.points_a)
 terrain.trees_b = grow_trees(terrain.points_b)

 shift_y = -20
 a_end = random_endpoint(shift_y)
 b_start = {x=0, y=a_end.y}
 b_end = random_endpoint(shift_y)
 bg_terrain = {
  points_a = generate_points({x=0,y=random_endpoint(shift_y-5).y}, a_end, 0.9, 30),
  points_b = generate_points(b_start, b_end, 0.9, 30),
  offset = 0,
  speed = 0.02,
  pallete = 1,
  generate = function (s,e)
   e.y += -20
   return generate_points(s,e,0.9,30)
  end
 }

 for i=1, 15 do
  x = i / 14 * 128 + rnd(15) - 40
  clouds[i] = generate_cloud(x)
 end

 load_save()
 reset_arrow()
 randomize_target_and_wind()
end

okay_to_update = true
-- last_time = time()
function _update()
 -- if stat(7) == 30 then
 --  gm = 2
 -- else
 --  gm = 1
 -- end
 -- gm = (time() - last_time) * 60 / stat(7)
 if okay_to_update then
  -- last_time = time()
  if game_state == 'shoot' then
   move_arrow()
   move_clouds()
  elseif game_state == 'aiming' then
   process_aiming()
   move_clouds()
  elseif game_state == 'next_level' then
   level_transition()
  elseif game_state == 'missed' then
   process_missed()
   move_clouds()
  elseif game_state == 'title' then
   process_title()
  else
   stop("invalid game_state")
  end
  windmill_counter = ((windmill_counter + (1 * gm)) % 120)
  title.offset = (title.offset + 0.4) % 7
  check_debug()
 end

 okay_to_update = true
end

function _draw()
 rectfill(0, 0, 127, 127, 12)
 if game_state == 'shoot' or game_state == 'missed' then
  draw_clouds()
  draw_horizon()
  draw_terrain(bg_terrain)
  draw_terrain(terrain)
  draw_target_zone()
  draw_grounded_arrows()
  draw_arrow()
  draw_dude()
  draw_trees()
  draw_hud()
 elseif game_state == 'next_level' then
  draw_clouds()
  draw_horizon()
  draw_terrain(bg_terrain)
  draw_terrain(terrain)
  draw_grounded_arrows()
  draw_arrow()
  draw_trees()
  draw_hud()
 elseif game_state == 'aiming' then
  draw_clouds()
  draw_horizon()
  draw_terrain(bg_terrain)
  draw_terrain(terrain)
  draw_target_zone()
  draw_dude()
  draw_grounded_arrows()
  draw_trees()
  draw_hud()
 elseif game_state == 'title' then
  draw_clouds()
  draw_horizon()
  draw_terrain(bg_terrain)
  draw_terrain(terrain)
  draw_trees()
  draw_hud()
  draw_title()
 end

 if game_state == 'shoot' then
  draw_arrow_shadow()
 end

 if debug then
  print(stat(7), 1, 122, 7)
  print(stat(1), 16, 122, 7)
  print(flr(gm + 0.05), 47, 122, 7)
 end

 okay_to_update = true
end

function load_save()
 level = dget(0)
 total_shots = dget(1)
end

function save()
 dset(0, level)
 dset(1, total_shots)
end
-->8
gravity = 0.01

level_transition_x = nil
function level_transition()
 if level_transition_x == nil then
  level_transition_x = arrow.pos.x - 10
 end

 if level_transition_x > 0 then
  move_offset(terrain)
  move_offset(bg_terrain)
  level_transition_x -= terrain.speed * gm
  arrow.pos.x -= terrain.speed * gm
  foreach(grounded_arrows, function(ar) ar.pos.x -= terrain.speed * gm end)
 else
  grounded_arrows = {}
  ga_index = 1
  reset_arrow()
  level += 1
  level_shots = 0
  level_transition_x = nil
  aiming.last_angle_percent = nil
  aiming.last_power_percent = nil
  randomize_target_and_wind()
  save()
  game_state = "aiming"
 end
end

function randomize_target_and_wind()
 wind = flr(rnd(19)) - 9
 target_zone.x = flr(rnd(50)) + 50
 if wind < 0 then
  target_zone.x += flr(wind * 1.5)
 end
end

function check_debug()
 if btnp(0) and btnp(1) then
  debug = not debug
 end 
end

function move_offset(terrain)
 if terrain.offset <= -127 then
  terrain.points_a = terrain.points_b
  b_start = {x=0, y=terrain.points_a[128].y}
  terrain.points_b = terrain.generate(
   b_start, random_endpoint()
  )
  terrain.trees_a = terrain.trees_b
  terrain.trees_b = grow_trees(terrain.points_b)
  terrain.offset = 0
 else
  terrain.offset -= terrain.speed * gm
 end
end

function move_arrow()
 if not arrow.grounded then
  if arrow.pos.x >= 130 then
   reset_arrow()
   game_state = "aiming"
   sfx(1)
   return
  end

  arrow.speed.x = min(
   arrow.speed.x + (arrow.accel.x * gm), gm
  )
  arrow.speed.y = min(
   arrow.speed.y + ((arrow.accel.y + gravity) * gm), gm
  )
  arrow.pos.x += arrow.speed.x * gm
  arrow.pos.y += arrow.speed.y * gm

  t_point = point_at_x(flr(arrow.pos.x))
  if arrow.pos.y >= t_point.y then
   -- colision happened
   arrow.pos.x -= arrow.speed.x
   arrow.pos.y = flr(arrow.pos.y - arrow.speed.y)
   arrow.c_atan = atan2(-arrow.speed.x, arrow.speed.y)
   
   arrow.speed.x = 0
   arrow.speed.x = 0
   arrow.grounded=true
   add_grounded_arrow(arrow)
   if arrow.pos.x >= target_zone.x and arrow.pos.x <= target_zone.x + 10 then
    sfx(2)
    game_state = 'next_level'
   else
    sfx(0)
    game_state = "missed"
   end
   save()
  end
 end
end

ga_index = 1
function add_grounded_arrow(arrow)
 grounded_arrows[ga_index] = {
  pos = {x = arrow.pos.x, y = arrow.pos.y },
  c_atan = arrow.c_atan
 }
 ga_index = (ga_index % 15) + 1
end

function move_clouds()
 for i=1, #clouds do
  cloud = clouds[i]
  cwidth = cloud_sprites[clouds[i].csprite].width
  if cloud.x > 128 and wind > 0 then
   clouds[i] = generate_cloud()
   new_cwidth = cloud_sprites[clouds[i].csprite].width
   clouds[i].x = flr(rnd(15)) - 15 - (8 * new_cwidth)
  elseif cloud.x < -(8*cwidth) and wind < 0 then
   clouds[i] = generate_cloud()
   clouds[i].x = flr(rnd(15)) + 128
  else
   cloud.x += cloud.speed * 0.01 * wind * 0.2 * gm
  end
 end
end

aiming = {
 aim_state = 'angle',
 bar_percent = 0.0,
 bar_direction = 1,
 last_angle_percent = nil,
 last_power_percent = nil
}
function process_aiming()
 if aiming.aim_state == 'angle' then
   rad = aiming.bar_percent * 0.25
   arrow.speed.x = cos(rad)
   arrow.speed.y = sin(rad)
 end

 if btnp(4) or btnp(5) then
  if aiming.aim_state == 'angle' then
   aiming.last_angle_percent = aiming.bar_percent
   aiming.aim_state = 'power'
   aiming.bar_percent = 0.0
  else
   aiming.last_power_percent = aiming.bar_percent
   arrow.speed.x *= (0.3 + aiming.bar_percent * 0.8)
   arrow.speed.y *= (0.3 + aiming.bar_percent * 0.8)
   aiming.aim_state = 'angle'
   game_state = 'shoot'
   sfx(3)
   level_shots += 1
   total_shots += 1
  end
  aiming.bar_direction = 1
 else
  if aiming.bar_direction > 0 then
   aiming.bar_percent += (0.01 * gm)
  else
   aiming.bar_percent -= (0.01 * gm)
  end
  if aiming.bar_percent >= 1 or aiming.bar_percent <= 0 then
   aiming.bar_direction *= -1
  end
 end
end

function process_missed()
 if btnp(4) or btnp(5) then
  reset_arrow()
  game_state = 'aiming'
 end
end

function process_title()
 if btnp(4) or btnp(5) then
  game_state = 'aiming'
 end
end

function reset_arrow()
 aiming.bar_percent = 0.0
 adjusted_y = point_at_x(10).y-6
 arrow = {
  pos = {x=10,y=adjusted_y},
  speed = { x=0, y=0},
  accel = {x=(wind / 6500), y=0},
  c_atan = nil,
  start_pos = {x=10, y=adjusted_y}
 }
end

function random_endpoint(offset)
 if not offset then offset = 0 end
 return {
  x=127, y=(82 + flr(rnd(25)) + offset)
 }
end

function grow_trees(points)
 trees = {}
 previous_y = 0
 for i=1, flr(rnd(6)) do
  tx = flr(rnd(120))
  ty = min(points[tx].y + flr(rnd(i*3) + 5), 124)
  trees[i] = { x = tx, y = ty, tsprite = flr(rnd(#tree_sprites)) + 1, flip = flr(rnd(2)) == 1 }
 end

 sorted_trees = {}
 while #trees > 0 do
  lowest_y = 128
  tree = nil
  for i=1, #trees do
   if trees[i].y < lowest_y then
    lowest_y = trees[i].y
    tree = trees[i]
   end
  end
  sorted_trees[#sorted_trees+1] = tree
  del(trees, tree)
  lowest_y = 0
  tree = nil
 end
 return sorted_trees
end

function generate_points(s,e,r,d)
 points = {[0]=s,[1]=s,[128]=e}
 w = 128
 while points[3] == nil do
  i = w/2
  a = 0
  b = w
  while i <= 128 do
   p_a = points[a]
   p_b = points[b]
   
   p_x = (p_a.x + p_b.x)/2
   p_y = min(126, max(2, (p_a.y + p_b.y)/2 + rnd(d*2) - d))
   points[i] = {x=p_x,y=p_y}
   
   i = i+w
   a = a+w
   b = b+w
  end
  w = w/2
  d = d*2^(r*-1)
 end
 return points
end

function generate_cloud(c_x)
 return { csprite = flr(rnd(#cloud_sprites)) + 1, flip = flr(rnd(2)) == 1, x = c_x, y = flr(rnd(35)) + 15, speed = 1 }
end

function point_at_x(p_x)
 i = p_x+1-flr(terrain.offset)
 if i >= 129 then
  return {x=p_x, y=terrain.points_b[i-128].y}
 else
  return {x=p_x, y=terrain.points_a[i].y}
 end
end

-->8

function draw_grounded_arrows()
 foreach(grounded_arrows, draw_arrow)
end

function draw_arrow(arw)
 if not arw then
  arw = arrow
 end

 t = arw.c_atan
 if not t then
  t = atan2(-arw.speed.x, arw.speed.y)
 end
 if t > 0.69 then
  spr(7, arw.pos.x-4, arw.pos.y-5)
 elseif t > 0.55 then
  spr(0, arw.pos.x-4, arw.pos.y-4)
 elseif t > 0.45 then
  spr(1, arw.pos.x-5, arw.pos.y-3)
 elseif t > 0.25 then
  spr(2, arw.pos.x-4, arw.pos.y-1)
 else
  spr(3, arw.pos.x-3, arw.pos.y)
 end

 -- pset(arw.pos.x, arw.pos.y, 14)
 -- if arw.start_pos then
  -- pset(arw.start_pos.x, arw.start_pos.y, 10)
 -- end
end

target_zone = {
 x = 100
}
function draw_target_zone()
 palletes = {7, 0, 12, 8, 10, 10, 8, 12, 0, 7}
 for i=0, 9 do
  point = point_at_x(i+target_zone.x)
  pset(point.x, point.y, palletes[i+1])
  pset(point.x, point.y-1, palletes[i+1])
  pset(point.x, point.y+1, palletes[i+1])
 end
end

function draw_terrain(terrain)
 for i=#terrain.points_a,1,-1  do
  local x = terrain.points_a[i].x + terrain.offset
  if x < 0 then break end
  if x <= 128 then
   line(x, terrain.points_a[i].y, x, 128, terrain.pallete)
  end
 end
 
 for i=1, #terrain.points_b do
  local x = terrain.points_b[i].x + terrain.offset + 127
  if x > 128 then break end
  if x >= 0 then
   line(x, terrain.points_b[i].y, x, 128, terrain.pallete)
  end
 end
end

function draw_arrow_shadow()
 shadow = point_at_x(flr(arrow.pos.x))
 distance = abs(shadow.y - flr(arrow.pos.y))
 if distance > 20 then
  pset(arrow.pos.x, shadow.y+1, 5)
 elseif distance > 13 then
  pset(arrow.pos.x, shadow.y+1, 0)
 else
  pset(arrow.pos.x, shadow.y+1, 0)
  pset(arrow.pos.x-1, shadow.y+1, 0)
 end
end

function draw_clouds()
 for i=1, #clouds do
  cloud = clouds[i]
  csprite = cloud_sprites[cloud.csprite]
  spr(csprite.sprite, cloud.x, cloud.y, csprite.width, csprite.height, cloud.flip)
 end
end

function draw_trees()
 for i=1, #terrain.trees_a do
  tree = terrain.trees_a[i]
  local x = tree.x + terrain.offset
  if x > -8 then
   tsprite = tree_sprites[tree.tsprite]
   spr(tsprite.sprite, x, tree.y, 1, 1, tree.flip)
  end
 end

 for i=1, #terrain.trees_b do
  tree = terrain.trees_b[i]
  local x = tree.x + terrain.offset + 127
  if x <= 128 then
   tsprite = tree_sprites[tree.tsprite]
   spr(tsprite.sprite, x, tree.y, 1, 1, tree.flip)
  end
 end
end

function draw_hud()
 height = 15
 rectfill(0,0,127,height,7)
 line(0,height,127,height,6)

 max_width = 60
 width = min(aiming.bar_percent * max_width, max_width)
 rectfill(2, 8, 2+width, 12, 8)
 rect(1, 7, 62, 13, 0)

 print("level", 65, 1, 5)
 print(level, 65, 8, 0)

 print("shots", 88, 1, 5)
 print(total_shots, 88, 8, 0)

 print("wind", 112, 1, 5)
 print(abs(wind), 112, 8, 0)
 draw_wind_arrow(118, 6)


 if game_state == 'shoot' then
  print("release!", 1, 1, 5)
 elseif game_state == 'missed' then
  print("release! ❎", 1, 1, 5)
 elseif game_state == "next_level" then
  if level_shots > 10 then
   print(level_shots.." shots...", 1, 1, 5)
  elseif level_shots > 7 then
   print("finally...", 1, 1, 5)
  elseif level_shots > 4 then
   print("congrats!", 1, 1, 5)
  elseif level_shots > 1 then
   print("nice job!", 1, 1, 5)
  else
   print("great shot!", 1, 1, 5)
  end
  rectfill(2, 8, 1+max_width, 12, title.palletes[(0 - flr(title.offset)) % 7 + 1])
 elseif game_state == 'title' then
  print("❎ to start", 1, 1, 5)
  rectfill(2, 8, 1+max_width, 12, title.palletes[(0 - flr(title.offset)) % 7 + 1])
 elseif game_state == 'aiming' then
  print("set "..aiming.aim_state.." ❎", 1, 1, 5)
  if aiming.aim_state == 'angle' and aiming.last_angle_percent then
   x = min(aiming.last_angle_percent * max_width, max_width)
   line(1+x, 7, 1+x, 13, 9)
  elseif aiming.last_power_percent then
   x = min(aiming.last_power_percent * max_width, max_width)
   line(1+x, 7, 1+x, 13, 9)
  end
 end
end

function draw_wind_arrow(x, y)
 palt(0, false)
 palt(1, true)

 if abs(wind) >= 7 then
  pal(11, 8)
 elseif abs(wind) >= 5 then
  pal(11, 9)
 elseif abs(wind) >= 3 then
  pal(11, 10)
 end
 if wind ~= 0 then
  spr(32, x, y, 1, 1, wind <= 0)
 end

 pal()
 palt()
end

function draw_dude()
 palt(0, false)
 palt(1, true)
 if game_state == 'aiming' then
  spr(16, arrow.start_pos.x-7, arrow.start_pos.y+1)
 else
  spr(17, arrow.start_pos.x-7, arrow.start_pos.y+1)
 end
 palt()

 if game_state == 'aiming' then
  -- if aiming.aim_state == 'angle' then
   line(arrow.pos.x-3, arrow.pos.y+4, arrow.pos.x + (arrow.speed.x*14), arrow.pos.y + (arrow.speed.y*15), 7)
  -- else
  --  scale = 14 * aiming.bar_percent
  --  line(arrow.pos.x-3, arrow.pos.y+4, arrow.pos.x + (arrow.speed.x*scale), arrow.pos.y + (arrow.speed.y*scale), 7)
  -- end
 end
end

function draw_horizon()
 hy = 85
 rectfill(0, hy, 128, 128, 11)
 for i=0, 22 do
  spr(48 + (flr(windmill_counter / 30) + i) % 4, i*6, hy-6)
 end
end

title = {
 palletes = {8, 9, 10, 11, 12, 14, 13},
 offset = 0,
}

function draw_title()
 palt(0, false)
 palt(1, true)
 spacing = 2
 y_offset = -3
 o = -1 * flr(title.offset)

 pal(7, title.palletes[(0 + o) % 7 + 1])
 sspr(0, 32, 8, 16, spacing, 36+y_offset, 16, 32) -- 'E'
 sspr(40, 32, 8, 16, spacing, 70+y_offset, 16, 32) -- 'A'

 pal(7, title.palletes[(1 + o) % 7 + 1])
 sspr(8, 32, 8, 16, spacing*2 + 16*1, 36+y_offset, 16, 32) -- 'N'
 sspr(48, 32, 8, 16, spacing*2 + 16*1, 70+y_offset, 16, 32) -- 'R'

 pal(7, title.palletes[(2 + o) % 7 + 1])
 sspr(16, 32, 8, 16, spacing*3 + 16*2, 36+y_offset, 16, 32) -- 'D'
 sspr(56, 32, 8, 16, spacing*3 + 16*2, 70+y_offset, 16, 32) -- 'C'

 pal(7, title.palletes[(3 + o) % 7 + 1])
 sspr(24, 32, 8, 16, spacing*4 + 16*3, 36+y_offset, 16, 32) -- 'L'
 sspr(0, 48, 8, 16, spacing*4 + 16*3, 70+y_offset, 16, 32) -- 'H'

 pal(7, title.palletes[(4 + o) % 7 + 1])
 sspr(0, 32, 8, 16, spacing*5 + 16*4, 36+y_offset, 16, 32) -- 'E'
 sspr(0, 32, 8, 16, spacing*5 + 16*4, 70+y_offset, 16, 32) -- 'E'

 pal(7, title.palletes[(5 + o) % 7 + 1])
 sspr(32, 32, 8, 16, spacing*6 + 16*5, 36+y_offset, 16, 32) -- 'S'
 sspr(48, 32, 8, 16, spacing*6 + 16*5, 70+y_offset, 16, 32) -- 'R'

 pal(7, title.palletes[(6 + o) % 7 + 1])
 sspr(32, 32, 8, 16, spacing*7 + 16*6, 36+y_offset, 16, 32) -- 'S'
 sspr(8, 48, 8, 16, spacing*7 + 16*6, 70+y_offset, 16, 32) -- 'Y'

 pal()
 print("press ❎/x to start", 26, 104+y_offset, 7)
 palt()
end

-- u60=_update60 _update60=nil function _update() u60() u60() end

__gfx__
08000000000000000000000000070000700000000000000000000000000808000000000000000000000000000000000000000000000000000000000000000000
87800000000000000000700000070000070000000000000000080000000878000000000000000000000000000000000000077777700000000000000000000000
08700000880000000007000000070000007800000000880000878000000070000000000000000000000000000000000007777777770000000000000000000000
00070000077777000870000000070000008780007777700000780000000070000000000000000000000000000000000000666777777777700000000000000000
00007000880000008780000000878000000800000000880007000000000070000000000000000000000077700000000000006666666600000000000000000000
00000000000000000800000000808000000000000000000070000000000070000000000000000000000777770000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000077707777777777000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000777777777777777777777700000000000000000000000000000000000
1111111111111111000bbb00000bb000000000000000000000000000000000000000007777777777777777777777770000000000000000000000000000000000
11111111111111110b3bb3b0000bb00000000000000bbb0000000000000000000077777777777777777777777777777000077777700000000000000000000000
0001111100011111bbbb3bbb00bbbb000b0b00000bb3bbb000000000000000000777777777777777777777777777777000777777777770000000000000000000
04447111044411113b4b4b3b000b400000b00000bbbbbb3b00000000000000007777777777777777777777777777777000006777777777000000000000000000
0604411106044111bb4444bb0bbbbbb00000b0b00bbbbbbb00000000000000006777777777777777777777777777776000000667777776660000000000000000
18614111106141110b344bb00004b00000000b000000000000000000000000006667766666666677777777777777666000000006666666600000000000000000
008641110006411100044000bbbbbbbbb0b000000000000000000000000000000066660666666667666666666666600000000000000000000000000000000000
010111110101111100044000000440000b0000000000000000000000000000000000000000006666600066660000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11100011111111110000000000000000000000000000000000000000000000000000777000077000000000000000000000000000000000000000000000000000
0000b0011111b1110000000000000000000000000000000000000000000000000077777777777707777777000000000000000000000000000000000000000000
0bbbbb0011111b110000000000000000000000000000000000000000000000000077777777777777777777777777000000000007777777777777777700000000
0bbbbbb01bbbbbb10000000000000000000000000000000000000000000000000777777777777777777777777777770007777777777777777777777777777000
0bbbbb0011111b110000000000000000000000000000000000000000000000000777777777777777777777777777776000066666666666666666666666666660
0000b0011111b1110000000000000000000000000000000000000000000000000666777777776666677777667777666000000000000000000000000000000000
11100011111111110000000000000000000000000000000000000000000000000006666666666000066666666666600000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000077000000000000000000000000000007777777770000000000000
00000000000000000000000000000000000000000000000000000000000000000000777077777770000000077700000000000007777777777777777000000000
00000000000000000000000000000000000000000000000000000000000000000077777777777777077700777777777000077777777777777777777777770000
00007000000700000070000000707000000000000000000000000000000000000777777777777777777777777777777700000777777777777777777777777770
00770000000700000007700000070000000000000000000000000000000000007777777777777766677777777777777700000077777777777777777777777000
00067000007670000076000000070000000000000000000000000000000000006666666777776660677777777777777600000000677777777777777777777700
00060000000600000006000000060000000000000000000000000000000000000066666666666600067777666777776000000000666666677777777660000000
00060000000600000006000000060000000000000000000000000000000000000000000660000000006666006666666000000000000000666666666600000000
00000000000000000000000100001111110000001100001100000001000000000000000000000000000000000000000000000000000000000000000000000000
07777770077007700777770007701111100777701007700107777700077777700000000000000000000000000000000000000000000000000000000000000000
07777770077007700777777007701111007777700077770007777770077777700000000000000000000000000000000000000000000000000000000000000000
07700000077007700770077007701111077700000777777007777770077000000000000000000000000000000000000000000000000000000000000000000000
07701111077007700770077007701111077001110770077007700770077011110000000000000000000000000000000000000000000000000000000000000000
07701111077707700770077007701111077001110770077007700770077011110000000000000000000000000000000000000000000000000000000000000000
07700001077707700770077007701111077700110777777007777770077011110000000000000000000000000000000000000000000000000000000000000000
07777701077777700770077007701111007770010777777007777700077011110000000000000000000000000000000000000000000000000000000000000000
07777701077777700770077007701111100777000777777007777770077011110000000000000000000000000000000000000000000000000000000000000000
07700001077077700770077007701111110077700770077007700770077011110000000000000000000000000000000000000000000000000000000000000000
07701111077077700770077007701111111007700770077007700770077011110000000000000000000000000000000000000000000000000000000000000000
07701111077007700770077007701111111007700770077007700770077011110000000000000000000000000000000000000000000000000000000000000000
07700000077007700770077007700000000077700770077007700770077000000000000000000000000000000000000000000000000000000000000000000000
07777770077007700777777007777770077777000770077007700770077777700000000000000000000000000000000000000000000000000000000000000000
07777770077007700777770007777770077770010770077007700770077777700000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000100000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000001111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
07700770077007701111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
07700770077007701111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
07700770077007701111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
07700770077007701111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
07700770077007701111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
07777770077777701111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
07777770077777701111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
07777770007777001111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
07777770100770011111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
07700770110770111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
07700770110770111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
07700770110770111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
07700770110770111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
07700770110770111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
00000000110000111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
__sfx__
00010000066700667006670066700667011400134001340013400134001340013400134001240011400104000f4000e4000d4000c4000a40009400094000a4000c4000b1000b400094000c40008400064000c400
000100001b0701d0502105025050260500560002600016000160033000200002000033000320002f0002b000270001e0001c0001a00018000150000d0000a0000100015000000001500015000000000000000000
0001000007550095500a5500b5500c5500f550115501355015550185501a5501b5501d550205502255025550285502a5502d5502e5503255035550385503b5503d5503f5503e5503f55000000000000000000000
00010000286401a6300c6300a63008620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
